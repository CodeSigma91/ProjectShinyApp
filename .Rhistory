scale_fill_brewer(palette='Set1') +
coord_flip() +
theme_bw() +
theme(legend.key=element_blank())
ggplot(data=inspections, aes (x=score)) +
stat_density(aes(color=boro), geom="line",position="identity") +
coord_cartesian(xlim=c(0,40)) +
labs(title='Density of restaurants by latest score and borough',
x='Score',
y='Restaurant density') +
scale_y_continuous(breaks=seq(0,0.14,0.02),
labels = scales::percent) +
scale_colour_brewer(palette='Set1') +
theme_bw() +
theme(legend.key=element_blank()) +
geom_vline(xintercept = c(14,28), colour='grey') +
annotate("text", x = c(6,20,35), y = 0.11, label = c('A','B','C'), size=6) +
annotate("rect", xmin = 0, xmax = 14, ymin = 0, ymax = 0.13, alpha = .2, fill='darkred') +
annotate("rect", xmin = 14, xmax = 28, ymin = 0, ymax = 0.13, alpha = .2, fill='darkblue') +
annotate("rect", xmin = 28, xmax = 60, ymin = 0, ymax = 0.13, alpha = .2, fill='darkgreen')
########## LOADING LIBRARIES
library(dplyr)
library(ggplot2)
library(tidyverse)
########## READING .CSVs
lst_fnames = read.csv(
"./data/lst_fnames.txt", header = FALSE)[[1]]
lst_fnames = as.character(lst_fnames)
file = as.character(c(1:length(lst_fnames)))
# *** (1) ***
for (i in 1:length(lst_fnames)) {
assign(paste0('df.',file[i]),
read.csv(paste0('./data/',lst_fnames[i])))
}
########## CLEANING DATA
# creating second set of dataframes to preserve original set
for (i in 1: length(lst_fnames)) {
assign(paste0('df2.',file[i]),
##################################################
# *** (2) ***
mutate(.data = (eval(parse(text = (paste0('df.',file[i]))))), OFFICE = gsub(pattern = 'FISCAL YEAR', replacement = '',x = OFFICE)) %>%
mutate(OFFICE = gsub(pattern = '[0-9]+', replacement = '',x = OFFICE)) %>%
# CHECK
# length(unique(`df.2018-Q2.csv`$OFFICE))
# length(unique(test1$OFFICE))
##################################################
mutate(START.DATE = as.Date(START.DATE,
format = ifelse(
grepl("^\\d{4}\\b-\\d{1,2}\\b-\\d{1,2}\\b", START.DATE),
"%Y-%m-%d",
"%m/%d/%y"
))) %>%
mutate(END.DATE = as.Date(END.DATE,
format = ifelse(
grepl("^\\d{4}\\b-\\d{1,2}\\b-\\d{1,2}\\b", END.DATE),
"%Y-%m-%d",
"%m/%d/%y"
))) %>%
##################################################
mutate(AMOUNT = as.numeric(AMOUNT)) %>%
filter(AMOUNT >0) %>%
select(OFFICE, PURPOSE, START.DATE, END.DATE, AMOUNT)
)}
df2_list = paste0('df2.', c(1:37))
# df2_list
df3.final = do.call('rbind', (eval(parse(text = df2_list))) )
df3.final[1:10, ]
df3.final[1, ]
dim(df3.final)
# df2_list
df3.final = do.call('rbind', df2_list )
# df2_list
df3.final = do.call('cbind', (eval(parse(text = df2_list))) )
dim(df3.final)
df3.final[1, ]
df3.final[1:10, ]
class(df3.final$START.DATE)
class(df3.final$START.DATE)
df3.final[1:3, 3:5]
# df2_list
df3.final = do.call('cbind', (eval(parse(text = df2_list))), stringsAsFactors = FALSE)
df3.final$START.DATE[2]
summary(df3.final)
df2.36$PURPOSE[2]
class(df3.final)
while (TRUE) {
if (file[i] == 37) {
break
}
for (i in 1:length(lst_fnames)) {
df3.final = full_join((eval(parse(text = (paste0('df2.',file[i]   ))))),
(eval(parse(text = (paste0('df2.',file[i+1] ))))),
by= "OFFICE"
)
}
}
dim(df3.final)
summary(df3.final)
df3.final$START.DATE [1]
########## LOADING LIBRARIES
library(dplyr)
library(ggplot2)
library(tidyverse)
########## READING .CSVs
lst_fnames = read.csv(
"./data/lst_fnames.txt", header = FALSE)[[1]]
lst_fnames = as.character(lst_fnames)
file = as.character(c(1:length(lst_fnames)))
# *** (1) ***
for (i in 1:length(lst_fnames)) {
assign(paste0('df.',file[i]),
read.csv(paste0('./data/',lst_fnames[i])))
}
########## CLEANING DATA
# creating second set of dataframes to preserve original set
for (i in 1: length(lst_fnames)) {
assign(paste0('df2.',file[i]),
##################################################
# *** (2) ***
mutate(.data = (eval(parse(text = (paste0('df.',file[i]))))), OFFICE = gsub(pattern = 'FISCAL YEAR', replacement = '',x = OFFICE)) %>%
mutate(OFFICE = gsub(pattern = '[0-9]+', replacement = '',x = OFFICE)) %>%
# CHECK
# length(unique(`df.2018-Q2.csv`$OFFICE))
# length(unique(test1$OFFICE))
##################################################
mutate(START.DATE = as.Date(START.DATE,
format = ifelse(
grepl("^\\d{4}\\b-\\d{1,2}\\b-\\d{1,2}\\b", START.DATE),
"%Y-%m-%d",
"%m/%d/%y"
))) %>%
mutate(END.DATE = as.Date(END.DATE,
format = ifelse(
grepl("^\\d{4}\\b-\\d{1,2}\\b-\\d{1,2}\\b", END.DATE),
"%Y-%m-%d",
"%m/%d/%y"
))) %>%
##################################################
mutate(AMOUNT = as.numeric(AMOUNT)) %>%
filter(AMOUNT >0) %>%
select(OFFICE, PURPOSE, START.DATE, END.DATE, AMOUNT)
)}
while (TRUE) {
for (i in 1:(length(lst_fnames)-1)) {
df3.final = full_join((eval(parse(text = (paste0('df2.',file[i]   ))))),
(eval(parse(text = (paste0('df2.',file[i+1] ))))),
by= "OFFICE"
)
}
}
while (TRUE) {
if (file[i] == 37) {
break
}
for (i in 1:length(lst_fnames)) {
df3.final = full_join((eval(parse(text = (paste0('df2.',file[i]   ))))),
(eval(parse(text = (paste0('df2.',file[i+1] ))))),
by= "OFFICE"
)
}
}
########## COMBINING ALL SEPARATE 37 DATAFRAMES
# *** RESULTS IN ERROR:
#     'Error: cannot allocate vector of size 938.3 Mb'
# while (TRUE) {
#   if (file[i] == 37) {
#     break
#   }
for (i in 1:(length(lst_fnames)-1)) {
df3.final = full_join((eval(parse(text = (paste0('df2.',file[i]   ))))),
(eval(parse(text = (paste0('df2.',file[i+1] ))))),
by= "OFFICE"
)
}
########## COMBINING ALL SEPARATE 37 DATAFRAMES
# *** RESULTS IN ERROR:
#     'Error: cannot allocate vector of size 938.3 Mb'
# while (TRUE) {
#   if (file[i] == 37) {
#     break
#   }
for (i in 1:length(lst_fnames)) {
df3.final = full_join((eval(parse(text = (paste0('df2.',file[i]   ))))),
(eval(parse(text = (paste0('df2.',file[i+1] ))))),
by= "OFFICE"
)
}
file
dim((eval(parse(text = (paste0('df2.',file[i]   ))))))
paste0('df2.',file[i]   )
df2_list = paste0('df2.',c(1:37))
df2_list
df2_list = paste0('df2.', c(1:37), sep=',')
df2_list
df2_list = paste0('df2.',c(1:37))
df2_list
df4.final = full_join(df2_list)
df4.final = full_join((eval(parse(text = df2_list))))
df4.final = data.frame()
dim(df4.final)
for (i in 1:length(lst_fnames)) {
df4.final [i, ] = full_join((eval(parse(text = df2_list[i]))),
(eval(parse(text = df2_list[i+1])))
)
}
df4.final = as.data.frame(matrix(1,5))
df4.final
df4.final = as.data.frame(matrix(NA,1,5))
df4.final
View(df2.37)
colnames(df4.final) = c('OFFICE', 'PURPOSE', 'START.DATE', 'END.DATE', 'AMOUNT')
df4.final
class(df4.final)
df4.final[1]
df4.final[2]
df4.final[2,]
for (i in 1:length(lst_fnames)) {
df4.final [i, ] = full_join((eval(parse(text = df2_list[i]))),
(eval(parse(text = df2_list[i+1]))),
by = 'OFFICE'
)
}
# NOT A SOLUTION!
df3.final = full_join(df2.1, df2.2, df2.3, df2.4, df2.5, df2.6, df2.7,
df2.8, df2.9, df2.10, df2.11, df2.12, df2.13, df2.14,
df2.15, df2.16, df2.17, df2.18, df2.19, df2.20, df2.21,
df2.22, df2.23, df2.24, df2.25, df2.26, df2.27, df2.28,
df2.29, df2.30, df2.31, df2.32, df2.33, df2.34, df2.35,
df2.36,df2.37
)
# NOT A SOLUTION!
df3.final = full_join(df2.1, df2.2, df2.3, df2.4, df2.5, df2.6, df2.7,
df2.8, df2.9, df2.10, df2.11, df2.12, df2.13, df2.14,
df2.15, df2.16, df2.17, df2.18, df2.19, df2.20, df2.21,
df2.22, df2.23, df2.24, df2.25, df2.26, df2.27, df2.28,
df2.29, df2.30, df2.31, df2.32, df2.33, df2.34, df2.35,
df2.36, df2.37, by= 'OFFICE'
)
########## COMBINING ALL SEPARATE 37 DATAFRAMES
# *** RESULTS IN ERROR:
#     'Error: cannot allocate vector of size 938.3 Mb'
#LIST OF dataframes
df2_list = paste0('df2.',c(1:37))
df2_list
# Creating an empty dataframe to populate under a for loop
df4.final = as.data.frame(matrix(NA,1,5))
colnames(df4.final) = c('OFFICE', 'PURPOSE', 'START.DATE', 'END.DATE', 'AMOUNT')
# for loop to execute full join
for (i in 1:(length(lst_fnames)-1)) {
df4.final [i, ] = rbind((eval(parse(text = df2_list[i]  ))),
(eval(parse(text = df2_list[i+1])))
)
}
warnings()
# for loop to execute full join
for (i in 1:(length(lst_fnames)-1)) {
df4.final [i, ] = cbind((eval(parse(text = df2_list[i]  ))),
(eval(parse(text = df2_list[i+1])))
)
}
# for loop to execute full join
for (i in 1:(length(lst_fnames)-1)) {
df4.final = rbind((eval(parse(text = df2_list[i]  ))),
(eval(parse(text = df2_list[i+1])))
)
}
# NOT A SOLUTION!
df3.final = rbind(df2.1, df2.2, df2.3, df2.4, df2.5, df2.6, df2.7,
df2.8, df2.9, df2.10, df2.11, df2.12, df2.13, df2.14,
df2.15, df2.16, df2.17, df2.18, df2.19, df2.20, df2.21,
df2.22, df2.23, df2.24, df2.25, df2.26, df2.27, df2.28,
df2.29, df2.30, df2.31, df2.32, df2.33, df2.34, df2.35,
df2.36, df2.37
)
dim(df3.final)
summary(df3.final)
sum(df3.final$AMOUNT)
df3.final = df3.final %>%
mutate(COVERAGE.PERIOD = END.DATE - START.DATE)
df3.final = df3.final %>%
mutate(COVERAGE.PERIOD = END.DATE - START.DATE) %>%
summarize(sd(COVERAGE.PERIOD))
# NOT A SOLUTION!
df3.final = rbind(df2.1, df2.2, df2.3, df2.4, df2.5, df2.6, df2.7,
df2.8, df2.9, df2.10, df2.11, df2.12, df2.13, df2.14,
df2.15, df2.16, df2.17, df2.18, df2.19, df2.20, df2.21,
df2.22, df2.23, df2.24, df2.25, df2.26, df2.27, df2.28,
df2.29, df2.30, df2.31, df2.32, df2.33, df2.34, df2.35,
df2.36, df2.37
)
dim(df3.final)
sum(df3.final$AMOUNT)
df3.final.2 = df3.final %>%
mutate(COVERAGE.PERIOD = END.DATE - START.DATE) %>%
summarize(sd(COVERAGE.PERIOD))
df3.final.2
df3.final.2 = df3.final %>%
mutate(COVERAGE.PERIOD = END.DATE - START.DATE) %>%
df3.final.2 = df3.final %>%
mutate(COVERAGE.PERIOD = END.DATE - START.DATE) %>%
summary(df3.final)
summary(df3.final)
df3.final.2 = df3.final %>%
mutate(COVERAGE.PERIOD = END.DATE - START.DATE)
sd(df3.final.2$COVERAGE.PERIOD)
df3.final.2 = df3.final %>%
filter(is.na(START.DATE)==FALSE) %>%
mutate(COVERAGE.PERIOD = END.DATE - START.DATE)
sd(df3.final.2$COVERAGE.PERIOD)
df3.final.3 = df3.final %>%
filter(START.DATE >= `2010-01-01` & START.DATE <= `2016-12-31`) %>%
mutate(START.YEAR = as.numeric(format(START.DATE, "%Y"))) %>%
group_by(START.YEAR) %>%
summarize (AVG.ANNUAL.EXPENDITURE = mean(AMOUNT)) %>%
arrange(desc(AVG.ANNUAL.EXPENDITURE))
df3.final.3 = df3.final %>%
filter(START.DATE >= '2010-01-01' & START.DATE <= '2016-12-31') %>%
mutate(START.YEAR = as.numeric(format(START.DATE, "%Y"))) %>%
group_by(START.YEAR) %>%
summarize (AVG.ANNUAL.EXPENDITURE = mean(AMOUNT)) %>%
arrange(desc(AVG.ANNUAL.EXPENDITURE))
df3.final.3
df3.final.3 = df3.final %>%
filter(START.DATE >= '2010-01-01' & START.DATE <= '2016-12-31') %>%
mutate(START.YEAR = as.numeric(format(START.DATE, "%Y"))) %>%
group_by(START.YEAR) %>%
summarize (AVG.ANNUAL.EXPENDITURE = mean(AMOUNT),
MAX.EXPENDITURE = max(AMOUNT)) #%>%
#arrange(desc(AVG.ANNUAL.EXPENDITURE))
df3.final.3
#arrange(desc(AVG.ANNUAL.EXPENDITURE))
df3.final.3
df3.final.4 = df3.final %>%
filter(as.numeric(format(START.DATE, "%Y")) == '2016') %>%
group_by(OFFICE, PURPOSE) %>%
summarize(TOTAL.EXP = sum(AMOUNT)) %>%
arrange(desc(TOTAL.EXP))
df3.final.4 [1:10]
df3.final.4 [1:10, ]
sum(df3.final.4$AMOUNT)
df3.final.4a = df3.final %>%
filter(as.numeric(format(START.DATE, "%Y")) == '2016')
sum(df3.final.4a$AMOUNT)
# TOTAL AMOUNT (2016) : $5.11 BILLION
df3.final.4b = df3.final.4a%>%
group_by(OFFICE, PURPOSE) %>%
summarize(TOTAL.EXP = sum(AMOUNT)) %>%
arrange(desc(TOTAL.EXP))
df3.final.4b [1:10, ]
.49/5.11
(.49/5.11)*100
library(expss)
library(ggplot2)
library(dplyr)
library(data.table)
library(datasets)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
# PART (1)
# Univariate
summary(temp)
# Bivariate
tempEDA = temp %>%
group_by(Gender) %>%
summarize(Mean.HR = round(mean(Heart.Rate), 2),
Max.HR  = max(Heart.Rate),
Min.HR  = min(Heart.Rate),
Mean.BT = round(mean(Body.Temp),2),
Max.BT  = max(Body.Temp),
Min.BT  = min(Body.Temp))
tempEDA = as.data.frame(tempEDA)
tempEDA
# PART (2)
hrate_btemp = ggplot(temp, aes(x= Body.Temp, y= Heart.Rate)) +
geom_point(color = 'blue') +
theme_bw() + ggtitle('Heart Rate vs. Body Temperature')
hrate_btemp
btemp_gen = ggplot(temp, aes(x= Body.Temp)) +
# geom_histogram(bins = 45) +
geom_density(aes(color=Gender)) +
ggtitle('Body Temperature Density Chart by Gender') + theme_bw()
btemp_gen
hrate_gen = ggplot(temp, aes(x= Heart.Rate)) +
# geom_histogram(bins = 32) +
geom_density(aes(color=Gender)) +
ggtitle('Heart Rate Density Chart by Gender') + theme_bw()
hrate_gen
# PART (3)
t.test(temp$Body.Temp, mu=98.6)
# PART (4)
as.data.frame(temp%>%
group_by(Gender) %>%
summarize(Mean.BT   = round(mean(Body.Temp),3),
# stdev.  = round(sd(Body.Temp),3),
Intvl.95m = round((mean(Body.Temp)-(sd(Body.Temp)*2)),3),
Intvl.95p = round((mean(Body.Temp)+(sd(Body.Temp)*2)),3)
)
)
# The difference in mean body temperature between males and females in this
# The difference in mean body temperature between males and females in this
# sample is (98.394-98.105) 0.289 F.
temp.Male = temp %>% filter(Gender == 'Male')
temp.Female = temp %>% filter(Gender == 'Female')
var.test(temp.Male, temp.Female, ratio = 1, conf.level = 0.95)
temp.Male = temp %>% filter(Gender == 'Male') %>% mutate(-Body.Temp)
temp.Male[1:10, ]
temp.Male = temp %>% filter(Gender == 'Male') %>% select(-Body.Temp)
temp.Male[1:10, ]
temp.Male = temp %>% filter(Gender == 'Male') %>% select(-Body.Temp, -Gender)
temp.Male[1:10, ]
temp.M = temp %>% filter(Gender == 'Male') %>% select(-Body.Temp, -Gender)
temp.F = temp %>% filter(Gender == 'Female') %>% select(-Body.Temp, -Gender)
var.test(temp.M, temp.F, ratio = 1, conf.level = 0.95)
class(temp.M)
as.vector(temp.M = temp %>% filter(Gender == 'Male') %>% select(-Body.Temp, -Gender))
temp.M = temp %>% filter(Gender == 'Male') %>% select(-Body.Temp, -Gender)
as.vector(temp.M)
temp.F = temp %>% filter(Gender == 'Female') #%>% select(-Body.Temp, -Gender)
var.test(temp.M, temp.F$Heart.Rate, ratio = 1, conf.level = 0.95)
temp.F = temp %>% filter(Gender == 'Female') %>% select(-Body.Temp, -Gender)
temp.F = as.vector(temp.F)
class(temp.F)
temp.F = as.vector(temp.F)
class(temp.F)
var.test(temp.M, temp.F, ratio = 1, conf.level = 0.95)
class(temp.M)
temp.M = temp %>% filter(Gender == 'Male') #%>% select(-Body.Temp, -Gender)
temp.M.rate = as.vector(temp.M$Heart.Rate)
temp.F = temp %>% filter(Gender == 'Female') #%>% select(-Body.Temp, -Gender)
temp.F.rate = as.vector(temp.F$Heart.Rate)
class(temp.M)
class(temp.M.rate)
var.test(temp.M.rate, temp.F.rate, ratio = 1, conf.level = 0.95)
0.05-0.011
var.test(temp.M.rate,
temp.F.rate,
ratio = 1,
alternative = 'greater',
conf.level = 0.95)
load(PlantGrowth)
data2 = load(PlantGrowth)
shiny::runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
runApp('shinyApps/w19_project')
################################################################################
# LOADING LIBRARIES
library(tidyverse)
library(ggplot2)
################################################################################
# LOADING DATASET
proj.df = read.csv('./data/national.cba.report.1970.2015.txt',
sep = '\t',
stringsAsFactors = FALSE)
getwd()
################################################################################
# LOADING DATASET
proj.df = read.csv('./shinyApps/w19_project/data/national.cba.report.1970.2015.txt',
sep = '\t',
stringsAsFactors = FALSE)
################################################################################
# ANALYZING AND PREPARING DATASET
proj.df[1:3, 1:5]
proj.df %>%
select(Country, Record) %>%
group_by(Record) %>%
summarize(n = n_distinct(Country))
proj.df [(proj.df$Country == 'Afghanistan') & (proj.df$Record == 'Population'), ]
# n_distinct(proj.df$X)
# summary(proj.df$x)
proj.df2 = proj.df %>%
select(-X)
sum(is.na(proj.df2))
runApp('shinyApps/w19_project')
setwd("~/R/shinyApps/w19_project")
runApp()
################################################################################
# LOADING DATASET
complete.df = read.csv('./data/national.cba.report.1970.2015.txt',
sep = '\t',
stringsAsFactors = FALSE)
complete.df = complete.df %>%
select(-X)
complete.df[1:3, 1:3]
runApp()
runApp()
getwd()
runApp()
